{"version":3,"file":"timepicker.component.js","sourceRoot":"","sources":["../../.tmp/timepicker/timepicker.component.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:no-forward-ref max-file-line-count */\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  SimpleChanges, ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { TimepickerActions } from './reducer/timepicker.actions';\r\nimport { TimepickerStore } from './reducer/timepicker.store';\r\nimport { getControlsValue } from './timepicker-controls.util';\r\nimport { TimepickerConfig } from './timepicker.config';\r\nimport {\r\n  TimeChangeSource,\r\n  TimepickerComponentState,\r\n  TimepickerControls\r\n} from './timepicker.models';\r\nimport {\r\n  isValidDate,\r\n  padNumber,\r\n  parseTime,\r\n  isInputValid,\r\n  isHourInputValid,\r\n  isMinuteInputValid,\r\n  isSecondInputValid,\r\n  isInputLimitValid\r\n} from './timepicker.utils';\r\nimport { Subscription } from 'rxjs';\r\n\r\nexport const TIMEPICKER_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  // tslint:disable-next-line\r\n  useExisting: forwardRef(() => TimepickerComponent),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n  selector: 'timepicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [TIMEPICKER_CONTROL_VALUE_ACCESSOR, TimepickerStore],\r\n  template: \"<table> <tbody> <tr class=\\\"text-center\\\" [hidden]=\\\"!showSpinners\\\"> <!-- increment hours button--> <td> <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementHours || !isEditable\\\" (click)=\\\"changeHours(hourStep)\\\" ><span class=\\\"bs-chevron bs-chevron-up\\\"></span></a> </td> <!-- divider --> <td *ngIf=\\\"showMinutes\\\">&nbsp;&nbsp;&nbsp;</td> <!-- increment minutes button --> <td *ngIf=\\\"showMinutes\\\"> <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementMinutes || !isEditable\\\" (click)=\\\"changeMinutes(minuteStep)\\\" ><span class=\\\"bs-chevron bs-chevron-up\\\"></span></a> </td> <!-- divider --> <td *ngIf=\\\"showSeconds\\\">&nbsp;</td> <!-- increment seconds button --> <td *ngIf=\\\"showSeconds\\\"> <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementSeconds || !isEditable\\\" (click)=\\\"changeSeconds(secondsStep)\\\"> <span class=\\\"bs-chevron bs-chevron-up\\\"></span> </a> </td> <!-- space between --> <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td> <!-- meridian placeholder--> <td *ngIf=\\\"showMeridian\\\"></td> </tr> <tr> <!-- hours --> <td class=\\\"form-group\\\" [class.has-error]=\\\"invalidHours\\\"> <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidHours\\\" class=\\\"form-control text-center bs-timepicker-field\\\" placeholder=\\\"HH\\\" maxlength=\\\"2\\\" [readonly]=\\\"readonlyInput\\\" [disabled]=\\\"disabled\\\" [value]=\\\"hours\\\" (wheel)=\\\"prevDef($event);changeHours(hourStep * wheelSign($event), 'wheel')\\\" (keydown.ArrowUp)=\\\"changeHours(hourStep, 'key')\\\" (keydown.ArrowDown)=\\\"changeHours(-hourStep, 'key')\\\" (change)=\\\"updateHours($event.target.value)\\\"></td> <!-- divider --> <td *ngIf=\\\"showMinutes\\\">&nbsp;:&nbsp;</td> <!-- minutes --> <td class=\\\"form-group\\\" *ngIf=\\\"showMinutes\\\" [class.has-error]=\\\"invalidMinutes\\\"> <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidMinutes\\\" class=\\\"form-control text-center bs-timepicker-field\\\" placeholder=\\\"MM\\\" maxlength=\\\"2\\\" [readonly]=\\\"readonlyInput\\\" [disabled]=\\\"disabled\\\" [value]=\\\"minutes\\\" (wheel)=\\\"prevDef($event);changeMinutes(minuteStep * wheelSign($event), 'wheel')\\\" (keydown.ArrowUp)=\\\"changeMinutes(minuteStep, 'key')\\\" (keydown.ArrowDown)=\\\"changeMinutes(-minuteStep, 'key')\\\" (change)=\\\"updateMinutes($event.target.value)\\\"> </td> <!-- divider --> <td *ngIf=\\\"showSeconds\\\">&nbsp;:&nbsp;</td> <!-- seconds --> <td class=\\\"form-group\\\" *ngIf=\\\"showSeconds\\\" [class.has-error]=\\\"invalidSeconds\\\"> <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidSeconds\\\" class=\\\"form-control text-center bs-timepicker-field\\\" placeholder=\\\"SS\\\" maxlength=\\\"2\\\" [readonly]=\\\"readonlyInput\\\" [disabled]=\\\"disabled\\\" [value]=\\\"seconds\\\" (wheel)=\\\"prevDef($event);changeSeconds(secondsStep * wheelSign($event), 'wheel')\\\" (keydown.ArrowUp)=\\\"changeSeconds(secondsStep, 'key')\\\" (keydown.ArrowDown)=\\\"changeSeconds(-secondsStep, 'key')\\\" (change)=\\\"updateSeconds($event.target.value)\\\"> </td> <!-- space between --> <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td> <!-- meridian --> <td *ngIf=\\\"showMeridian\\\"> <button type=\\\"button\\\" class=\\\"btn btn-default text-center\\\" [disabled]=\\\"!isEditable || !canToggleMeridian\\\" [class.disabled]=\\\"!isEditable || !canToggleMeridian\\\" (click)=\\\"toggleMeridian()\\\" >{{ meridian }} </button> </td> </tr> <tr class=\\\"text-center\\\" [hidden]=\\\"!showSpinners\\\"> <!-- decrement hours button--> <td> <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementHours || !isEditable\\\" (click)=\\\"changeHours(-hourStep)\\\"> <span class=\\\"bs-chevron bs-chevron-down\\\"></span> </a> </td> <!-- divider --> <td *ngIf=\\\"showMinutes\\\">&nbsp;&nbsp;&nbsp;</td> <!-- decrement minutes button--> <td *ngIf=\\\"showMinutes\\\"> <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementMinutes || !isEditable\\\" (click)=\\\"changeMinutes(-minuteStep)\\\"> <span class=\\\"bs-chevron bs-chevron-down\\\"></span> </a> </td> <!-- divider --> <td *ngIf=\\\"showSeconds\\\">&nbsp;</td> <!-- decrement seconds button--> <td *ngIf=\\\"showSeconds\\\"> <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementSeconds || !isEditable\\\" (click)=\\\"changeSeconds(-secondsStep)\\\"> <span class=\\\"bs-chevron bs-chevron-down\\\"></span> </a> </td> <!-- space between --> <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td> <!-- meridian placeholder--> <td *ngIf=\\\"showMeridian\\\"></td> </tr> </tbody> </table> \",\r\n  styles: [`\r\n    .bs-chevron {\r\n      border-style: solid;\r\n      display: block;\r\n      width: 9px;\r\n      height: 9px;\r\n      position: relative;\r\n      border-width: 3px 0px 0 3px;\r\n    }\r\n\r\n    .bs-chevron-up {\r\n      -webkit-transform: rotate(45deg);\r\n      transform: rotate(45deg);\r\n      top: 2px;\r\n    }\r\n\r\n    .bs-chevron-down {\r\n      -webkit-transform: rotate(-135deg);\r\n      transform: rotate(-135deg);\r\n      top: -2px;\r\n    }\r\n\r\n    .bs-timepicker-field {\r\n      width: 50px;\r\n    }\r\n  `],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TimepickerComponent\r\n  implements ControlValueAccessor,\r\n    TimepickerComponentState,\r\n    TimepickerControls,\r\n    OnChanges,\r\n    OnDestroy {\r\n  /** hours change step */\r\n  @Input() hourStep: number;\r\n  /** hours change step */\r\n  @Input() minuteStep: number;\r\n  /** seconds change step */\r\n  @Input() secondsStep: number;\r\n  /** if true hours and minutes fields will be readonly */\r\n  @Input() readonlyInput: boolean;\r\n  /** if true hours and minutes fields will be disabled */\r\n  @Input() disabled: boolean;\r\n  /** if true scroll inside hours and minutes inputs will change time */\r\n  @Input() mousewheel: boolean;\r\n  /** if true up/down arrowkeys inside hours and minutes inputs will change time */\r\n  @Input() arrowkeys: boolean;\r\n  /** if true spinner arrows above and below the inputs will be shown */\r\n  @Input() showSpinners: boolean;\r\n  /** if true meridian button will be shown */\r\n  @Input() showMeridian: boolean;\r\n  /** show minutes in timepicker */\r\n  @Input() showMinutes: boolean;\r\n  /** show seconds in timepicker */\r\n  @Input() showSeconds: boolean;\r\n  /** meridian labels based on locale */\r\n  @Input() meridians: string[];\r\n  /** minimum time user can select */\r\n  @Input() min: Date;\r\n  /** maximum time user can select */\r\n  @Input() max: Date;\r\n\r\n  /** emits true if value is a valid date */\r\n  @Output() isValid = new EventEmitter<boolean>();\r\n\r\n  // ui variables\r\n  hours: string;\r\n  minutes: string;\r\n  seconds: string;\r\n  meridian: string;\r\n\r\n  /** @deprecated - please use `isEditable` instead */\r\n  get isSpinnersVisible(): boolean {\r\n    return this.showSpinners && !this.readonlyInput;\r\n  }\r\n\r\n  get isEditable(): boolean {\r\n    return !(this.readonlyInput || this.disabled);\r\n  }\r\n\r\n  // min\\max validation for input fields\r\n  invalidHours = false;\r\n  invalidMinutes = false;\r\n  invalidSeconds = false;\r\n\r\n  // time picker controls state\r\n  canIncrementHours: boolean;\r\n  canIncrementMinutes: boolean;\r\n  canIncrementSeconds: boolean;\r\n\r\n  canDecrementHours: boolean;\r\n  canDecrementMinutes: boolean;\r\n  canDecrementSeconds: boolean;\r\n\r\n  canToggleMeridian: boolean;\r\n\r\n  // control value accessor methods\r\n  onChange: any = Function.prototype;\r\n  onTouched: any = Function.prototype;\r\n\r\n  timepickerSub: Subscription;\r\n\r\n  constructor(\r\n    _config: TimepickerConfig,\r\n    _cd: ChangeDetectorRef,\r\n    private _store: TimepickerStore,\r\n    private _timepickerActions: TimepickerActions\r\n  ) {\r\n    Object.assign(this, _config);\r\n\r\n    this.timepickerSub = _store\r\n      .select(state => state.value)\r\n      .subscribe((value: Date) => {\r\n        // update UI values if date changed\r\n        this._renderTime(value);\r\n        this.onChange(value);\r\n\r\n        this._store.dispatch(\r\n          this._timepickerActions.updateControls(getControlsValue(this))\r\n        );\r\n      });\r\n\r\n    _store\r\n      .select(state => state.controls)\r\n      .subscribe((controlsState: TimepickerControls) => {\r\n        this.isValid.emit(isInputValid(this.hours, this.minutes, this.seconds, this.isPM()));\r\n        Object.assign(this, controlsState);\r\n        _cd.markForCheck();\r\n      });\r\n  }\r\n\r\n  resetValidation(): void {\r\n    this.invalidHours = false;\r\n    this.invalidMinutes = false;\r\n    this.invalidSeconds = false;\r\n  }\r\n\r\n  isPM(): boolean {\r\n    return this.showMeridian && this.meridian === this.meridians[1];\r\n  }\r\n\r\n  prevDef($event: any) {\r\n    $event.preventDefault();\r\n  }\r\n\r\n  wheelSign($event: any): number {\r\n    return Math.sign($event.deltaY as number) * -1;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this._store.dispatch(\r\n      this._timepickerActions.updateControls(getControlsValue(this))\r\n    );\r\n  }\r\n\r\n  changeHours(step: number, source: TimeChangeSource = ''): void {\r\n    this.resetValidation();\r\n    this._store.dispatch(this._timepickerActions.changeHours({ step, source }));\r\n  }\r\n\r\n  changeMinutes(step: number, source: TimeChangeSource = ''): void {\r\n    this.resetValidation();\r\n    this._store.dispatch(\r\n      this._timepickerActions.changeMinutes({ step, source })\r\n    );\r\n  }\r\n\r\n  changeSeconds(step: number, source: TimeChangeSource = ''): void {\r\n    this.resetValidation();\r\n    this._store.dispatch(\r\n      this._timepickerActions.changeSeconds({ step, source })\r\n    );\r\n  }\r\n\r\n  updateHours(hours: string): void {\r\n    this.resetValidation();\r\n    this.hours = hours;\r\n\r\n    const isValid = isHourInputValid(this.hours, this.isPM()) && this.isValidLimit();\r\n\r\n    if (!isValid) {\r\n      this.invalidHours = true;\r\n      this.isValid.emit(false);\r\n      this.onChange(null);\r\n\r\n      return;\r\n    }\r\n\r\n    this._updateTime();\r\n  }\r\n\r\n  updateMinutes(minutes: string) {\r\n    this.resetValidation();\r\n    this.minutes = minutes;\r\n\r\n    const isValid = isMinuteInputValid(this.minutes) && this.isValidLimit();\r\n\r\n    if (!isValid) {\r\n      this.invalidMinutes = true;\r\n      this.isValid.emit(false);\r\n      this.onChange(null);\r\n\r\n      return;\r\n    }\r\n\r\n    this._updateTime();\r\n  }\r\n\r\n  updateSeconds(seconds: string) {\r\n    this.resetValidation();\r\n    this.seconds = seconds;\r\n\r\n    const isValid = isSecondInputValid(this.seconds) && this.isValidLimit();\r\n\r\n    if (!isValid) {\r\n      this.invalidSeconds = true;\r\n      this.isValid.emit(false);\r\n      this.onChange(null);\r\n\r\n      return;\r\n    }\r\n\r\n    this._updateTime();\r\n  }\r\n\r\n  isValidLimit(): boolean {\r\n    return isInputLimitValid({\r\n      hour: this.hours,\r\n      minute: this.minutes,\r\n      seconds: this.seconds,\r\n      isPM: this.isPM()\r\n    }, this.max, this.min);\r\n  }\r\n\r\n  _updateTime() {\r\n    const _seconds = this.showSeconds ? this.seconds : void 0;\r\n    const _minutes = this.showMinutes ? this.minutes : void 0;\r\n    if (!isInputValid(this.hours, _minutes, _seconds, this.isPM())) {\r\n      this.isValid.emit(false);\r\n      this.onChange(null);\r\n\r\n      return;\r\n    }\r\n\r\n    this._store.dispatch(\r\n      this._timepickerActions.setTime({\r\n        hour: this.hours,\r\n        minute: this.minutes,\r\n        seconds: this.seconds,\r\n        isPM: this.isPM()\r\n      })\r\n    );\r\n  }\r\n\r\n  toggleMeridian(): void {\r\n    if (!this.showMeridian || !this.isEditable) {\r\n      return;\r\n    }\r\n\r\n    const _hoursPerDayHalf = 12;\r\n    this._store.dispatch(\r\n      this._timepickerActions.changeHours({\r\n        step: _hoursPerDayHalf,\r\n        source: ''\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Write a new value to the element.\r\n   */\r\n  writeValue(obj: any): void {\r\n    if (isValidDate(obj)) {\r\n      this._store.dispatch(this._timepickerActions.writeValue(parseTime(obj)));\r\n    } else if (obj == null) {\r\n      this._store.dispatch(this._timepickerActions.writeValue(null));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called when the control receives a change event.\r\n   */\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called when the control receives a touch event.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * This function is called when the control status changes to or from \"disabled\".\r\n   * Depending on the value, it will enable or disable the appropriate DOM element.\r\n   *\r\n   * @param isDisabled\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.timepickerSub.unsubscribe();\r\n  }\r\n\r\n  private _renderTime(value: string | Date): void {\r\n    if (!isValidDate(value)) {\r\n      this.hours = '';\r\n      this.minutes = '';\r\n      this.seconds = '';\r\n      this.meridian = this.meridians[0];\r\n\r\n      return;\r\n    }\r\n\r\n    const _value = parseTime(value);\r\n    const _hoursPerDayHalf = 12;\r\n    let _hours = _value.getHours();\r\n\r\n    if (this.showMeridian) {\r\n      this.meridian = this.meridians[_hours >= _hoursPerDayHalf ? 1 : 0];\r\n      _hours = _hours % _hoursPerDayHalf;\r\n      // should be 12 PM, not 00 PM\r\n      if (_hours === 0) {\r\n        _hours = _hoursPerDayHalf;\r\n      }\r\n    }\r\n\r\n    this.hours = padNumber(_hours);\r\n    this.minutes = padNumber(_value.getMinutes());\r\n    this.seconds = padNumber(_value.getUTCSeconds());\r\n  }\r\n}\r\n"]}