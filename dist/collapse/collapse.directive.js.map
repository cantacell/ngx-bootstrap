{"version":3,"file":"collapse.directive.js","sourceRoot":"","sources":["../../.tmp/collapse/collapse.directive.ts"],"names":[],"mappings":"AACA,OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,WAAW,EACX,KAAK,EACL,MAAM,EACN,SAAS,EACV,MAAM,eAAe,CAAC;;IAuCrB,2BAAoB,GAAe,EAAU,SAAoB;QAA7C,QAAG,GAAH,GAAG,CAAY;QAAU,cAAS,GAAT,SAAS,CAAW;;yBA5BxB,IAAI,YAAY,EAAE;;wBAEnB,IAAI,YAAY,EAAE;;0BAO7C,IAAI;;2BAE8B,KAAK;;0BAER,IAAI;;4BAEA,KAAK;KAcpD;0BAVG,uCAAQ;aAKZ;YACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;SACxB;;kBAPY,KAAc;YACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,MAAM,EAAE,CAAC;;;;;IAUhB,mDAAmD;;IACnD,kCAAM;IAAN;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;KACF;IAED,sCAAsC;;IACtC,gCAAI;IAAJ;QACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC3B;IAED,gDAAgD;;IAChD,gCAAI;IAAJ;QACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAEzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;QAEvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,SAAS,CAAC,QAAQ,CACrB,IAAI,CAAC,GAAG,CAAC,aAAa,EACtB,UAAU,EACV,SAAS,CACV,CAAC;QACF,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QAClE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1B;;gBAnFF,SAAS,SAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,aAAa;oBACvB,IAAI,EAAE;wBACJ,kBAAkB,EAAE,MAAM;qBAC3B;iBACF;;;;gBAdC,UAAU;gBAKV,SAAS;;;8BAYR,MAAM;6BAEN,MAAM;4BAEN,WAAW,SAAC,eAAe;+BAE3B,WAAW,SAAC,UAAU,cACtB,WAAW,SAAC,YAAY,cACxB,WAAW,SAAC,oBAAoB;gCAGhC,WAAW,SAAC,kBAAkB;+BAE9B,WAAW,SAAC,gBAAgB;iCAE5B,WAAW,SAAC,kBAAkB;6BAG9B,KAAK;;4BAtCR;;SAkBa,iBAAiB","sourcesContent":["// todo: add animations when https://github.com/angular/angular/issues/9947 solved\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[collapse]',\r\n  exportAs: 'bs-collapse',\r\n  host: {\r\n    '[class.collapse]': 'true'\r\n  }\r\n})\r\nexport class CollapseDirective {\r\n  /** This event fires as soon as content collapses */\r\n  @Output() collapsed: EventEmitter<any> = new EventEmitter();\r\n  /** This event fires as soon as content becomes visible */\r\n  @Output() expanded: EventEmitter<any> = new EventEmitter();\r\n\r\n  @HostBinding('style.display') display: string;\r\n  // shown\r\n  @HostBinding('class.in')\r\n  @HostBinding('class.show')\r\n  @HostBinding('attr.aria-expanded')\r\n  isExpanded = true;\r\n  // hidden\r\n  @HostBinding('attr.aria-hidden') isCollapsed = false;\r\n  // stale state\r\n  @HostBinding('class.collapse') isCollapse = true;\r\n  // animation state\r\n  @HostBinding('class.collapsing') isCollapsing = false;\r\n\r\n  /** A flag indicating visibility of content (shown or hidden) */\r\n  @Input()\r\n  set collapse(value: boolean) {\r\n    this.isExpanded = value;\r\n    this.toggle();\r\n  }\r\n\r\n  get collapse(): boolean {\r\n    return this.isExpanded;\r\n  }\r\n\r\n  constructor(private _el: ElementRef, private _renderer: Renderer2) {\r\n  }\r\n\r\n  /** allows to manually toggle content visibility */\r\n  toggle(): void {\r\n    if (this.isExpanded) {\r\n      this.hide();\r\n    } else {\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  /** allows to manually hide content */\r\n  hide(): void {\r\n    this.isCollapse = false;\r\n    this.isCollapsing = true;\r\n\r\n    this.isExpanded = false;\r\n    this.isCollapsed = true;\r\n\r\n    this.isCollapse = true;\r\n    this.isCollapsing = false;\r\n\r\n    this.display = 'none';\r\n    this.collapsed.emit(this);\r\n  }\r\n\r\n  /** allows to manually show collapsed content */\r\n  show(): void {\r\n    this.isCollapse = false;\r\n    this.isCollapsing = true;\r\n\r\n    this.isExpanded = true;\r\n    this.isCollapsed = false;\r\n\r\n    this.display = 'block';\r\n    // this.height = 'auto';\r\n    this.isCollapse = true;\r\n    this.isCollapsing = false;\r\n    this._renderer.setStyle(\r\n      this._el.nativeElement,\r\n      'overflow',\r\n      'visible'\r\n    );\r\n    this._renderer.setStyle(this._el.nativeElement, 'height', 'auto');\r\n    this.expanded.emit(this);\r\n  }\r\n}\r\n"]}