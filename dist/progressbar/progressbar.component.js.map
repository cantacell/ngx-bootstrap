{"version":3,"file":"progressbar.component.js","sourceRoot":"","sources":["../../.tmp/progressbar/progressbar.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;;IAwDrC,8BAAY,MAAyB;yBA1BzB,KAAK;wBAoByB,IAAI;oBAEhC,EAAE;oBAEC,GAAG;QAGlB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KAC7B;0BAhCG,uCAAK;;;;kBAAC,KAAqB;YAC7B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;;;;IAItB,sBAAI,uCAAK;aAAT;YACE,MAAM,CAAC,KAAK,EAAE,CAAC;SAChB;;;OAAA;0BAKG,qCAAG;;;YACL,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;;aAGnB,UAAQ,CAAS;YACf,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACd,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAiB;gBAClC,GAAG,CAAC,qBAAqB,EAAE,CAAC;aAC7B,CAAC,CAAC;SACJ;;;;IAWD,qCAAM,GAAN,UAAO,GAAiB;QACtB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAE3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACrB;IAED,wCAAS,GAAT,UAAU,GAAiB;QACzB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;KAC7C;;gBAjEF,SAAS,SAAC;oBACT,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,yPAAyP;oBACnQ,MAAM,EAAE;wBACN,oEAKD;qBACA;iBACF;;;;gBAfQ,iBAAiB;;;4BAkBvB,KAAK;4BAEL,KAAK;yBAEL,KAAK;0BAIL,KAAK;wBAYL,WAAW,SAAC,UAAU,cACtB,KAAK;6BAYL,WAAW,SAAC,gBAAgB;;+BApD/B;;SAiBa,oBAAoB","sourcesContent":["import { Component, HostBinding, Input } from '@angular/core';\r\nimport { ProgressbarConfig } from './progressbar.config';\r\nimport { isBs3 } from '../utils/index';\r\nimport { BarComponent } from './bar.component';\r\n\r\n@Component({\r\n  selector: 'progressbar',\r\n  template: \"<bar [type]=\\\"type\\\" [value]=\\\"_value\\\" *ngIf=\\\"!isStacked\\\"> <ng-content></ng-content> </bar> <ng-template [ngIf]=\\\"isStacked\\\"> <bar *ngFor=\\\"let item of _value\\\" [type]=\\\"item.type\\\" [value]=\\\"item.value\\\">{{ item.label }}</bar> </ng-template> \",\r\n  styles: [\r\n    `\r\n    :host {\r\n      width: 100%;\r\n      display: flex;\r\n    }\r\n  `\r\n  ]\r\n})\r\nexport class ProgressbarComponent {\r\n  /** if `true` changing value of progress bar will be animated*/\r\n  @Input() animate: boolean;\r\n  /** If `true`, striped classes are applied */\r\n  @Input() striped: boolean;\r\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\r\n  @Input() type: string;\r\n  /** current value of progress bar. Could be a number or array of objects\r\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\r\n   */\r\n  @Input()\r\n  set value(value: number | any[]) {\r\n    this.isStacked = Array.isArray(value);\r\n    this._value = value;\r\n  }\r\n  isStacked = false;\r\n  _value: number | any[];\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  /** maximum total value of progress element */\r\n  @HostBinding('attr.max')\r\n  @Input()\r\n  get max(): number {\r\n    return this._max;\r\n  }\r\n\r\n  set max(v: number) {\r\n    this._max = v;\r\n    this.bars.forEach((bar: BarComponent) => {\r\n      bar.recalculatePercentage();\r\n    });\r\n  }\r\n\r\n  @HostBinding('class.progress') addClass = true;\r\n\r\n  bars: any[] = [];\r\n\r\n  protected _max = 100;\r\n\r\n  constructor(config: ProgressbarConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n  addBar(bar: BarComponent): void {\r\n    bar.animate = this.animate;\r\n    bar.striped = this.striped;\r\n\r\n    this.bars.push(bar);\r\n  }\r\n\r\n  removeBar(bar: BarComponent): void {\r\n    this.bars.splice(this.bars.indexOf(bar), 1);\r\n  }\r\n}\r\n"]}