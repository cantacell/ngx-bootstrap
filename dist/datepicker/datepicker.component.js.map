{"version":3,"file":"datepicker.component.js","sourceRoot":"","sources":["../../.tmp/datepicker/datepicker.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n  forwardRef\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DatePickerInnerComponent } from './datepicker-inner.component';\r\nimport { DatepickerConfig } from './datepicker.config';\r\n\r\nexport const DATEPICKER_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  // tslint:disable-next-line\r\n  useExisting: forwardRef(() => DatePickerComponent),\r\n  multi: true\r\n};\r\n\r\n/* tslint:disable:component-selector-name component-selector-type */\r\n@Component({\r\n  selector: 'datepicker',\r\n  template: `\r\n    <datepicker-inner [activeDate]=\"activeDate\"\r\n                      (update)=\"onUpdate($event)\"\r\n                      [locale]=\"config.locale\"\r\n                      [datepickerMode]=\"datepickerMode\"\r\n                      [initDate]=\"initDate\"\r\n                      [minDate]=\"minDate\"\r\n                      [maxDate]=\"maxDate\"\r\n                      [minMode]=\"minMode\"\r\n                      [maxMode]=\"maxMode\"\r\n                      [showWeeks]=\"showWeeks\"\r\n                      [formatDay]=\"formatDay\"\r\n                      [formatMonth]=\"formatMonth\"\r\n                      [formatYear]=\"formatYear\"\r\n                      [formatDayHeader]=\"formatDayHeader\"\r\n                      [formatDayTitle]=\"formatDayTitle\"\r\n                      [formatMonthTitle]=\"formatMonthTitle\"\r\n                      [startingDay]=\"startingDay\"\r\n                      [yearRange]=\"yearRange\"\r\n                      [customClass]=\"customClass\"\r\n                      [dateDisabled]=\"dateDisabled\"\r\n                      [dayDisabled]=\"dayDisabled\"\r\n                      [onlyCurrentMonth]=\"onlyCurrentMonth\"\r\n                      [shortcutPropagation]=\"shortcutPropagation\"\r\n                      [monthColLimit]=\"monthColLimit\"\r\n                      [yearColLimit]=\"yearColLimit\"\r\n                      (selectionDone)=\"onSelectionDone($event)\"\r\n                      (activeDateChange)=\"onActiveDateChange($event)\">\r\n      <daypicker tabindex=\"0\"></daypicker>\r\n      <monthpicker tabindex=\"0\"></monthpicker>\r\n      <yearpicker tabindex=\"0\"></yearpicker>\r\n    </datepicker-inner>\r\n    `,\r\n  providers: [DATEPICKER_CONTROL_VALUE_ACCESSOR]\r\n})\r\n/* tslint:enable:component-selector-name component-selector-type */\r\nexport class DatePickerComponent implements ControlValueAccessor {\r\n  /** sets datepicker mode, supports: `day`, `month`, `year` */\r\n  @Input() datepickerMode = 'day';\r\n  /** default date to show if `ng-model` value is not specified */\r\n  @Input() initDate: Date;\r\n  /**  oldest selectable date */\r\n  @Input() minDate: Date;\r\n  /** latest selectable date */\r\n  @Input() maxDate: Date;\r\n  /** set lower datepicker mode, supports: `day`, `month`, `year` */\r\n  @Input() minMode: string;\r\n  /** sets upper datepicker mode, supports: `day`, `month`, `year` */\r\n  @Input() maxMode: string;\r\n  /** if false week numbers will be hidden */\r\n  @Input() showWeeks = true;\r\n  /** format of day in month */\r\n  @Input() formatDay: string;\r\n  /** format of month in year */\r\n  @Input() formatMonth: string;\r\n  /** format of year in year range */\r\n  @Input() formatYear: string;\r\n  /** format of day in week header */\r\n  @Input() formatDayHeader: string;\r\n  /** format of title when selecting day */\r\n  @Input() formatDayTitle: string;\r\n  /** format of title when selecting month */\r\n  @Input() formatMonthTitle: string;\r\n  /** starting day of the week from 0-6 (0=Sunday, ..., 6=Saturday) */\r\n  @Input() startingDay: number;\r\n  /** number of years displayed in year selection */\r\n  @Input() yearRange: number;\r\n  /** if true only dates from the currently displayed month will be shown */\r\n  @Input() onlyCurrentMonth: boolean;\r\n  /** if true shortcut`s event propagation will be disabled */\r\n  @Input() shortcutPropagation: boolean;\r\n  /** number of months displayed in a single row of month picker */\r\n  @Input() monthColLimit: number;\r\n  /** number of years displayed in a single row of year picker */\r\n  @Input() yearColLimit: number;\r\n  /** array of custom css classes to be applied to targeted dates */\r\n  @Input() customClass: { date: Date; mode: string; clazz: string }[];\r\n  /** array of disabled dates */\r\n  @Input() dateDisabled: { date: Date; mode: string }[];\r\n  /** disabled days of the week from 0-6 (0=Sunday, ..., 6=Saturday) */\r\n  @Input() dayDisabled: number[];\r\n\r\n  /** currently active date */\r\n  @Input()\r\n  get activeDate(): Date {\r\n    return this._activeDate || this._now;\r\n  }\r\n\r\n  set activeDate(value: Date) {\r\n    this._activeDate = value;\r\n  }\r\n\r\n  @Output()\r\n  selectionDone: EventEmitter<Date> = new EventEmitter<Date>(undefined);\r\n\r\n  /** callback to invoke when the activeDate is changed. */\r\n  @Output()\r\n  activeDateChange: EventEmitter<Date> = new EventEmitter<Date>(\r\n    undefined\r\n  );\r\n\r\n  @ViewChild(DatePickerInnerComponent)\r\n  _datePicker: DatePickerInnerComponent;\r\n\r\n  onChange: any = Function.prototype;\r\n  onTouched: any = Function.prototype;\r\n\r\n  config: DatepickerConfig;\r\n\r\n  protected _now: Date = new Date();\r\n  protected _activeDate: Date;\r\n\r\n  constructor(config: DatepickerConfig) {\r\n    this.config = config;\r\n    this.configureOptions();\r\n  }\r\n\r\n  configureOptions(): void {\r\n    Object.assign(this, this.config);\r\n  }\r\n\r\n  onUpdate(event: any): void {\r\n    this.activeDate = event;\r\n    this.onChange(event);\r\n  }\r\n\r\n  onSelectionDone(event: Date): void {\r\n    this.selectionDone.emit(event);\r\n  }\r\n\r\n  onActiveDateChange(event: Date): void {\r\n    this.activeDateChange.emit(event);\r\n  }\r\n  // todo: support null value\r\n  writeValue(value: any): void {\r\n    if (this._datePicker.compare(value, this._activeDate) === 0) {\r\n      return;\r\n    }\r\n    if (value && value instanceof Date) {\r\n      this.activeDate = value;\r\n      this._datePicker.select(value, false);\r\n\r\n      return;\r\n    }\r\n\r\n    this.activeDate = value ? new Date(value) : void 0;\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n"]}