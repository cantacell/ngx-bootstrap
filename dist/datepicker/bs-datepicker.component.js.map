{"version":3,"file":"bs-datepicker.component.js","sourceRoot":"","sources":["../../.tmp/datepicker/bs-datepicker.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACS,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,KAAK,EACrC,MAAM,EAAE,SAAS,EAAiB,gBAAgB,EACtE,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,sBAAsB,EAAE,MAAM,8CAA8C,CAAC;AACtF,OAAO,EAAE,8BAA8B,EAAE,MAAM,+CAA+C,CAAC;AAE/F,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;;IA0F1D,+BAAmB,OAA2B,EAClC,WAAuB,EACvB,SAAoB,EACpB,iBAAmC,EACnC,GAA2B;QAJpB,YAAO,GAAP,OAAO,CAAoB;;;;yBAhFY,QAAQ;;;;;wBAK9C,OAAO;;;;4BAIH,IAAI;;;;;yBAKP,MAAM;;;;6BA2DmB,IAAI,YAAY,EAAE;qBAE9B,EAAE;;QAWlC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,YAAY,CACjC,WAAW,EACX,iBAAiB,EACjB,SAAS,CACV,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;KAC3C;0BA1EG,yCAAM;;;;;YACR,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;;aAGlC,UAAW,KAAc;YACvB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,IAAI,EAAE,CAAC;aACb;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,IAAI,EAAE,CAAC;aACb;SACF;;;;0BAgBG,0CAAO;;;;kBAAC,KAAW;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC;aACR;YACD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;;;IA6CjC,wCAAQ,GAAR;QAAA,iBAOC;QANC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,cAAM,OAAA,KAAI,CAAC,IAAI,EAAE,EAAX,CAAW;SACxB,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;IAED,2CAAW,GAAX,UAAY,OAAsB;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC1D,MAAM,CAAC;SACR;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;SACrD;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;SACrD;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;SAC3D;KACF;IAED;;;OAGG;;;;;IACH,oCAAI;;;;IAAJ;QAAA,iBA4BC;QA3BC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC;SACR;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW;aACnC,OAAO,CAAC,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC;aAC9D,MAAM,CAAC,8BAA8B,CAAC;aACtC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;aAClB,QAAQ,CAAC,EAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAC,CAAC;aACtC,IAAI,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAC,CAAC,CAAC;;QAGrC,IAAI,CAAC,KAAK,CAAC,IAAI,CACb,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,UAAC,KAAW;YACvC,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;SAC5C,CAAC,CACH,CAAC;;QAGF,IAAI,CAAC,KAAK,CAAC,IAAI,CACb,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,KAAW;YAC7D,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,KAAI,CAAC,IAAI,EAAE,CAAC;SACb,CAAC,CACH,CAAC;KACH;IAED;;;OAGG;;;;;IACH,oCAAI;;;;IAAJ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;SACzB;QACD,GAAG,CAAC,CAAc,UAAU,EAAV,KAAA,IAAI,CAAC,KAAK,EAAV,cAAU,EAAV,IAAU;YAAvB,IAAM,GAAG,SAAA;YACZ,GAAG,CAAC,WAAW,EAAE,CAAC;SACnB;KACF;IAED;;;OAGG;;;;;IACH,sCAAM;;;;IAAN;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;SACpB;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;KACb;IAED;;OAEG;;;;IACH,yCAAS;;;IAAT;QACE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE;YAC5D,KAAK,EAAE,IAAI,CAAC,QAAQ;YACpB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO;YAC/D,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO;SAChE,CAAC,CAAC;KACJ;IAED,2CAAW,GAAX;QACE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;KAC5B;;gBA5MF,SAAS,SAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,QAAQ,EAAE,cAAc;iBACzB;;;;gBALQ,kBAAkB;gBAPA,UAAU;gBACR,SAAS;gBAAiB,gBAAgB;gBAG9D,sBAAsB;;;8BAa5B,KAAK;6BAKL,KAAK;iCAIL,KAAK;8BAKL,KAAK;2BAKL,KAAK;4BAgBL,MAAM;6BAIN,MAAM;4BAMN,KAAK;6BAYL,KAAK;+BAIL,KAAK;4BAIL,KAAK;4BAIL,KAAK;kCAIL,MAAM;;gCA3FT;;SAca,qBAAqB","sourcesContent":["import {\r\n  ComponentRef, Directive, ElementRef, EventEmitter, Input, OnChanges,\r\n  OnDestroy, OnInit, Output, Renderer2, SimpleChanges, ViewContainerRef\r\n} from '@angular/core';\r\nimport { ComponentLoader } from '../component-loader/component-loader.class';\r\nimport { ComponentLoaderFactory } from '../component-loader/component-loader.factory';\r\nimport { BsDatepickerContainerComponent } from './themes/bs/bs-datepicker-container.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { BsDatepickerConfig } from './bs-datepicker.config';\r\n\r\n@Directive({\r\n  selector: '[bsDatepicker]',\r\n  exportAs: 'bsDatepicker'\r\n})\r\nexport class BsDatepickerDirective implements OnInit, OnDestroy, OnChanges {\r\n  /**\r\n   * Placement of a datepicker. Accepts: \"top\", \"bottom\", \"left\", \"right\"\r\n   */\r\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\r\n  /**\r\n   * Specifies events that should trigger. Supports a space separated list of\r\n   * event names.\r\n   */\r\n  @Input() triggers = 'click';\r\n  /**\r\n   * Close datepicker on outside click\r\n   */\r\n  @Input() outsideClick = true;\r\n  /**\r\n   * A selector specifying the element the datepicker should be appended to.\r\n   * Currently only supports \"body\".\r\n   */\r\n  @Input() container = 'body';\r\n\r\n  /**\r\n   * Returns whether or not the datepicker is currently being shown\r\n   */\r\n  @Input()\r\n  get isOpen(): boolean {\r\n    return this._datepicker.isShown;\r\n  }\r\n\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this.show();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits an event when the datepicker is shown\r\n   */\r\n  @Output() onShown: EventEmitter<any>;\r\n  /**\r\n   * Emits an event when the datepicker is hidden\r\n   */\r\n  @Output() onHidden: EventEmitter<any>;\r\n\r\n  _bsValue: Date;\r\n  /**\r\n   * Initial value of datepicker\r\n   */\r\n  @Input()\r\n  set bsValue(value: Date) {\r\n    if (this._bsValue === value) {\r\n      return;\r\n    }\r\n    this._bsValue = value;\r\n    this.bsValueChange.emit(value);\r\n  }\r\n\r\n  /**\r\n   * Config object for datepicker\r\n   */\r\n  @Input() bsConfig: Partial<BsDatepickerConfig>;\r\n  /**\r\n   * Indicates whether datepicker's content is enabled or not\r\n   */\r\n  @Input() isDisabled: boolean;\r\n  /**\r\n   * Minimum date which is available for selection\r\n   */\r\n  @Input() minDate: Date;\r\n  /**\r\n   * Maximum date which is available for selection\r\n   */\r\n  @Input() maxDate: Date;\r\n  /**\r\n   * Emits when datepicker value has been changed\r\n   */\r\n  @Output() bsValueChange: EventEmitter<Date> = new EventEmitter();\r\n\r\n  protected _subs: Subscription[] = [];\r\n\r\n  private _datepicker: ComponentLoader<BsDatepickerContainerComponent>;\r\n  private _datepickerRef: ComponentRef<BsDatepickerContainerComponent>;\r\n\r\n  constructor(public _config: BsDatepickerConfig,\r\n              _elementRef: ElementRef,\r\n              _renderer: Renderer2,\r\n              _viewContainerRef: ViewContainerRef,\r\n              cis: ComponentLoaderFactory) {\r\n    // todo: assign only subset of fields\r\n    Object.assign(this, this._config);\r\n    this._datepicker = cis.createLoader<BsDatepickerContainerComponent>(\r\n      _elementRef,\r\n      _viewContainerRef,\r\n      _renderer\r\n    );\r\n    this.onShown = this._datepicker.onShown;\r\n    this.onHidden = this._datepicker.onHidden;\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this._datepicker.listen({\r\n      outsideClick: this.outsideClick,\r\n      triggers: this.triggers,\r\n      show: () => this.show()\r\n    });\r\n    this.setConfig();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this._datepickerRef || !this._datepickerRef.instance) {\r\n      return;\r\n    }\r\n\r\n    if (changes.minDate) {\r\n      this._datepickerRef.instance.minDate = this.minDate;\r\n    }\r\n\r\n    if (changes.maxDate) {\r\n      this._datepickerRef.instance.maxDate = this.maxDate;\r\n    }\r\n\r\n    if (changes.isDisabled) {\r\n      this._datepickerRef.instance.isDisabled = this.isDisabled;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens an element’s datepicker. This is considered a “manual” triggering of\r\n   * the datepicker.\r\n   */\r\n  show(): void {\r\n    if (this._datepicker.isShown) {\r\n      return;\r\n    }\r\n\r\n    this.setConfig();\r\n\r\n    this._datepickerRef = this._datepicker\r\n      .provide({provide: BsDatepickerConfig, useValue: this._config})\r\n      .attach(BsDatepickerContainerComponent)\r\n      .to(this.container)\r\n      .position({attachment: this.placement})\r\n      .show({placement: this.placement});\r\n\r\n    // if date changes from external source (model -> view)\r\n    this._subs.push(\r\n      this.bsValueChange.subscribe((value: Date) => {\r\n        this._datepickerRef.instance.value = value;\r\n      })\r\n    );\r\n\r\n    // if date changes from picker (view -> model)\r\n    this._subs.push(\r\n      this._datepickerRef.instance.valueChange.subscribe((value: Date) => {\r\n        this.bsValue = value;\r\n        this.hide();\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Closes an element’s datepicker. This is considered a “manual” triggering of\r\n   * the datepicker.\r\n   */\r\n  hide(): void {\r\n    if (this.isOpen) {\r\n      this._datepicker.hide();\r\n    }\r\n    for (const sub of this._subs) {\r\n      sub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles an element’s datepicker. This is considered a “manual” triggering\r\n   * of the datepicker.\r\n   */\r\n  toggle(): void {\r\n    if (this.isOpen) {\r\n      return this.hide();\r\n    }\r\n\r\n    this.show();\r\n  }\r\n\r\n  /**\r\n   * Set config for datepicker\r\n   */\r\n  setConfig(): void {\r\n    this._config = Object.assign({}, this._config, this.bsConfig, {\r\n      value: this._bsValue,\r\n      isDisabled: this.isDisabled,\r\n      minDate: this.minDate || this.bsConfig && this.bsConfig.minDate,\r\n      maxDate: this.maxDate || this.bsConfig && this.bsConfig.maxDate\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): any {\r\n    this._datepicker.dispose();\r\n  }\r\n}\r\n"]}