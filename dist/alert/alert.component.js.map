{"version":3,"file":"alert.component.js","sourceRoot":"","sources":["../../.tmp/alert/alert.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,uBAAuB,EACvB,iBAAiB,EACjB,SAAS,EACT,YAAY,EACZ,KAAK,EAEL,MAAM,EACP,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;;IAgC7C,wBAAY,OAAoB,EAAU,eAAkC;QAA5E,iBAMC;QANyC,oBAAe,GAAf,eAAe,CAAmB;;;;;oBApB5D,SAAS;;2BAEc,KAAK;;sBAK1B,IAAI;;;;uBAKF,IAAI,YAAY,EAAkB;;wBAEjC,IAAI,YAAY,EAAkB;uBAG7C,EAAE;iCACQ,IAAI,YAAY,EAAW;QAG7C,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,UAAC,WAAoB;YACpD,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC;YAC3D,KAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;SACrC,CAAC,CAAC;KACJ;IAED,iCAAQ,GAAR;QAAA,iBAQC;QAPC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;;YAE1B,UAAU,CACR,cAAM,OAAA,KAAI,CAAC,KAAK,EAAE,EAAZ,CAAY,EAClB,QAAQ,CAAC,IAAI,CAAC,gBAA0B,EAAE,EAAE,CAAC,CAC9C,CAAC;SACH;KACF;IAED,6EAA6E;IAC7E,gDAAgD;IAChD;;OAEG;;;;;;IACH,8BAAK;;;;;;IAAL;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;SACR;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1B;;gBA9DF,SAAS,SAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,QAAQ,EAAE,8XAA8X;oBACxY,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;;gBAPQ,WAAW;gBAPlB,iBAAiB;;;yBAoBhB,KAAK;gCAES,KAAK;qCAEnB,KAAK;2BAGL,KAAK;4BAKL,MAAM;6BAEN,MAAM;;;QAZN,QAAQ,EAAE;;;yBAxBb;;SAiBa,cAAc","sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output\r\n} from '@angular/core';\r\nimport { AlertConfig } from './alert.config';\r\nimport { OnChange } from '../utils/decorators';\r\n\r\n@Component({\r\n  selector: 'alert,bs-alert',\r\n  template: \"<ng-template [ngIf]=\\\"isOpen\\\"> <div [class]=\\\"'alert alert-' + type\\\" role=\\\"alert\\\" [ngClass]=\\\"classes\\\"> <ng-template [ngIf]=\\\"dismissible\\\"> <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"close()\\\"> <span aria-hidden=\\\"true\\\">&times;</span> <span class=\\\"sr-only\\\">Close</span> </button> </ng-template> <ng-content></ng-content> </div> </ng-template> \",\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AlertComponent implements OnInit {\r\n  /** Alert type.\r\n   * Provides one of four bootstrap supported contextual classes:\r\n   * `success`, `info`, `warning` and `danger`\r\n   */\r\n  @Input() type = 'warning';\r\n  /** If set, displays an inline \"Close\" button */\r\n  @OnChange()   @Input()   dismissible = false;\r\n  /** Number in milliseconds, after which alert will be closed */\r\n  @Input() dismissOnTimeout: number | string;\r\n\r\n  /** Is alert visible */\r\n  @Input() isOpen = true;\r\n\r\n  /** This event fires immediately after close instance method is called,\r\n   * $event is an instance of Alert component.\r\n   */\r\n  @Output() onClose = new EventEmitter<AlertComponent>();\r\n  /** This event fires when alert closed, $event is an instance of Alert component */\r\n  @Output() onClosed = new EventEmitter<AlertComponent>();\r\n\r\n\r\n  classes = '';\r\n  dismissibleChange = new EventEmitter<boolean>();\r\n\r\n  constructor(_config: AlertConfig, private changeDetection: ChangeDetectorRef) {\r\n    Object.assign(this, _config);\r\n    this.dismissibleChange.subscribe((dismissible: boolean) => {\r\n      this.classes = this.dismissible ? 'alert-dismissible' : '';\r\n      this.changeDetection.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.dismissOnTimeout) {\r\n      // if dismissOnTimeout used as attr without binding, it will be a string\r\n      setTimeout(\r\n        () => this.close(),\r\n        parseInt(this.dismissOnTimeout as string, 10)\r\n      );\r\n    }\r\n  }\r\n\r\n  // todo: animation ` If the .fade and .in classes are present on the element,\r\n  // the alert will fade out before it is removed`\r\n  /**\r\n   * Closes an alert by removing it from the DOM.\r\n   */\r\n  close(): void {\r\n    if (!this.isOpen) {\r\n      return;\r\n    }\r\n\r\n    this.onClose.emit(this);\r\n    this.isOpen = false;\r\n    this.changeDetection.markForCheck();\r\n    this.onClosed.emit(this);\r\n  }\r\n}\r\n"]}